{"version":3,"file":"index.js","sources":["../src/flexgrid/Col.js","../src/flexgrid/index.js","../src/flexgrid/Row.js"],"sourcesContent":["import {h} from '@falconjs.io/falcon'\r\n\r\n\r\nlet  Col = ({ span, offset, children, prefix = 'flcn-grid-col', order, ...others }) => {  \r\n  let classes='flcn-col '\r\n  others['class'] ? classes = others['class']+' ' : null\r\n  let sizes = ['xs', 'sm', 'md', 'lg', 'xl']\r\n  sizes.map( (size)=>{\r\n     if (others[size]) {\r\n        let sizeParams = {};\r\n        if (typeof others[size] === 'number') {\r\n          sizeParams.span = others[size];\r\n        } else if (typeof others[size] === 'object') {\r\n          sizeParams = others[size] || {};\r\n        }\r\n        delete others[size];\r\n        typeof sizeParams.span !== 'undefined' ? classes += `${prefix}-${size}-${sizeParams.span} ` : null\r\n        sizeParams.offset || sizeParams.offset === 0 ? classes += `${prefix}-${size}-offset-${sizeParams.offset} ` : null\r\n        sizeParams.order || sizeParams.order === 0? classes += `${prefix}-${size}-order-${sizeParams.order}` : null\r\n      }\r\n\r\n  })\r\n      span ?  classes += `${prefix}-${span} ` : null\r\n      offset ?  classes += `${prefix}-offset-${offset} ` : null\r\n      order ?  classes += `${prefix}-order-${order} ` : null\r\n  return <div {...others} class={classes}  >{children}</div>\r\n}\r\n\r\nCol.defaultProps = {\r\n  offset: 0\r\n}\r\n\r\nexport default Col;\r\n","import Col from './Col'\r\nimport Row from './Row'\r\nimport './style/index.scss'\r\n\r\nmodule.exports = { \r\n    Col:Col, \r\n    Row:Row \r\n}\r\n","import {h} from '@falconjs.io/falcon'\r\nlet Row = ({ justify='start', vertical='top', className, gutter = 0 , style, children,prefix = 'flcn-grid-row', ...others }) => {\r\nlet classes = 'flcn-row '\r\n classes += `${prefix} ` \r\n classes += `${prefix}-${justify} ` || justify+' '\r\n classes += `${prefix}-${vertical} ` || vertical+' '\r\n    const rowStyle = gutter > 0 ? Object.assign({}, {\r\n      marginLeft: gutter / -2,\r\n      marginRight: gutter / -2,\r\n    }, style) : style;\r\n\r\n\r\n    const cols = children.map( (col) => {\r\n      if (!col) {\r\n        return null;\r\n      }\r\n      if (col.props && gutter > 0) {\r\n        \r\n        let style ={\r\n          paddingLeft: gutter / 2 +'px',\r\n          paddingRight: gutter / 2 +'px'\r\n        }\r\n       \r\n        col.props.style= style\r\n        }\r\n        return col\r\n      \r\n    });\r\n    return <div {...others} style={rowStyle} class={classes}>{cols}</div>;\r\n}\r\nexport default Row;"],"names":["let","Col","ref","classes","others","map","size","sizeParams","span","prefix","offset","order","h","class","children","defaultProps","module","exports","Row","justify","vertical","rowStyle","gutter","Object","assign","marginLeft","marginRight","style","cols","col","props","paddingLeft","paddingRight"],"mappings":"qCAGAA,IAAKC,WAAOC,kEAAmC,4MACzCC,EAAQ,YACZC,EAAM,QAAYD,EAAUC,EAAM,MAAU,WAChC,CAAC,KAAM,KAAM,KAAM,KAAM,MAC/BC,aAAMC,MACLF,EAAOE,GAAO,KACXC,EAAa,GACW,iBAAjBH,EAAOE,GAChBC,EAAWC,KAAOJ,EAAOE,GACQ,iBAAjBF,EAAOE,KACvBC,EAAaH,EAAOE,IAAS,WAExBF,EAAOE,QACa,IAApBC,EAAWC,OAAuBL,GAAcM,MAAUH,MAAQC,aACzEA,EAAWG,QAAgC,IAAtBH,EAAWG,UAAeP,GAAYM,MAAYH,aAAeC,eACtFA,EAAWI,OAA8B,IAArBJ,EAAWI,SAAaR,GAAYM,MAAYH,YAAcC,EAAiB,UAIrGC,IAAQL,GAAYM,MAAYD,OAChCE,IAAUP,GAAYM,aAAmBC,OACzCC,IAASR,GAAYM,YAAkBE,OACpCC,2BAASR,GAAQS,MAAOV,IAAYW,IAG7Cb,EAAIc,aAAe,CACjBL,OAAQ,GCzBVM,OAAOC,QAAU,CACbhB,IAAIA,EACJiB,aCLOhB,kCAAU,yCAAkB,qCAA2B,wDAA6B,4NAC3FC,EAAU,YACbA,GAAcM,MACdN,GAAcM,MAAUU,OAAcA,EAAQ,IAC9ChB,GAAcM,MAAUW,OAAeA,EAAS,QACvCC,EAAWC,EAAS,EAAIC,OAAOC,OAAO,GAAI,CAC9CC,WAAYH,GAAU,EACtBI,YAAaJ,GAAU,GACtBK,GAASA,EAGNC,EAAOd,EAAST,aAAMwB,UACrBA,GAGDA,EAAIC,OAASR,EAAS,IAOxBO,EAAIC,MAAMH,MALC,CACTI,YAAaT,EAAS,EAAG,KACzBU,aAAcV,EAAS,EAAG,OAKrBO,GAXA,cAcJjB,2BAAKR,GAAYuB,MAAON,EAAUR,MAAOV,IAAUyB"}